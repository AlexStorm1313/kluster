#!/usr/bin/env bash

INSTALL_DIR=./install
OUTPUT_DIR=./output/${OKD_VERSION}
OVERLAY_DIR=./overlay
TOOLING_DIR=./tooling/${OKD_VERSION}

# Source environment variables
source .env

set -e # Exit on error

function init_directory() {
    touch .env
    mkdir -p ${INSTALL_DIR}
    mkdir -p ${INSTALL_DIR}/manifests
    mkdir -p ${INSTALL_DIR}/openshift
    touch ${INSTALL_DIR}/install-config.yaml

    mkdir -p ${OVERLAY_DIR}
}

# Function to get OKD version specific tooling
function get_tooling() {
    mkdir -p ${TOOLING_DIR}

    podman run --rm --privileged \
        -v ./${TOOLING_DIR}:/data \
        -w /data \
        quay.io/openshift/origin-cli:latest \
        oc adm release extract --tools registry.ci.openshift.org/origin/release:${OKD_VERSION}

    rm ${TOOLING_DIR}/*rhel*.tar.gz

    tar zxvf ${TOOLING_DIR}/openshift-install-linux-*.tar.gz -C ${TOOLING_DIR}
    chmod +x ${TOOLING_DIR}/openshift-install
    tar zxvf ${TOOLING_DIR}/openshift-client-linux-*.tar.gz -C ${TOOLING_DIR}
    chmod +x ${TOOLING_DIR}/oc
}

function get_image_url() {
    echo $(${TOOLING_DIR}/openshift-install coreos print-stream-json | grep location | grep ${HOST}.${ARCH}.${IMAGE} | cut -d \" -f4)
}

function get_image() {
    echo "Yet to be implemented, Download Image or ISO to be used, $(get_image_url)"
    podman run --rm --privileged \
        -v ./${OUTPUT_DIR}:/data -w /data \
        quay.io/coreos/coreos-installer:release download --image-url $(get_image_url)
}

# Prepare output directory and allow for customization
function create_manifests() {
    rm -rf ${OUTPUT_DIR}
    mkdir -p ${OUTPUT_DIR}
    cp ${INSTALL_DIR}/install-config.yaml ${OUTPUT_DIR}

    ${TOOLING_DIR}/openshift-install --dir=${OUTPUT_DIR} create manifests

    # Process OpenShift Butane configs
    if [ -f ${INSTALL_DIR}/openshift/*.yaml ]; then
        for file in ${INSTALL_DIR}/openshift/*.yaml; do
            podman run --rm --privileged \
                -v ${INSTALL_DIR}/openshift:/data \
                -v ${OUTPUT_DIR}/openshift:/openshift \
                -w /data \
                quay.io/coreos/butane:release \
                --pretty --strict $(basename $file) \
                -o /openshift/$(basename $file)
        done
    fi

    cp -r ${INSTALL_DIR}/manifests/*.yaml ${OUTPUT_DIR}/manifests
}

# Function to create single node ignition config
function create_single_node_ignition_config() {
    create_manifests

    ${TOOLING_DIR}/openshift-install --dir=${OUTPUT_DIR} create single-node-ignition-config

    mv ${OUTPUT_DIR}/bootstrap-in-place-for-live-iso.ign ${OUTPUT_DIR}/bootstrap.ign

    create_overlay
}

# Function to create regular ignition configs
function create_ignition_configs() {
    create_manifests

    ${TOOLING_DIR}/openshift-install --dir=${OUTPUT_DIR} create ignition-configs

    create_overlay
}

# Function to create ignition overlay, this allows for modifying the produced ignition config by the openshift-installer
function create_overlay() {
    if [ -f ${OVERLAY_DIR}/*.yaml ]; then
        for file in ${OVERLAY_DIR}/*.yaml; do
            podman run --rm --privileged \
                -v ${OVERLAY_DIR}:/overlay \
                -v ${OUTPUT_DIR}:/data \
                -w / \
                quay.io/coreos/butane:release \
                --pretty --strict --files-dir /data \
                ./overlay/$(basename $file) \
                -o ./data/$(basename $file .yaml).ign
        done
    fi
}

# Function to create disk images
function create_disk_image() {
    local image_variant=$1

    touch ${OUTPUT_DIR}/${image_variant}.img
    truncate -s 16G ${OUTPUT_DIR}/${image_variant}.img

    sudo losetup --detach ${DISK_DEVICE} || true
    sudo losetup -P ${DISK_DEVICE} ${OUTPUT_DIR}/${image_variant}.img

    sudo podman run --rm --privileged \
        -v /dev:/dev \
        -v /run/udev:/run/udev \
        -v ./${OUTPUT_DIR}:/data \
        -w /data \
        quay.io/coreos/coreos-installer:release \
        install \
        --image-url $(get_image_url) \
        --ignition-file ./${image_variant}.ign \
        ${DISK_DEVICE}

    sudo losetup --detach ${DISK_DEVICE}
}

# Function to copy images to libvirt
function copy_to_libvirt() {
    sudo cp -r ${OUTPUT_DIR}/*.img /var/lib/libvirt/images
}

# Function to show help documentation
function show_help() {
    cat <<EOF
    kluster - OKD install script
    =============================

    Usage: $0 COMMAND [SUBCOMMAND]

    Commands:
    ---------
    init                              Initialize the current directory as the configuration directory
    get
        tooling                       Download and extract OKD tooling for the specified version
        image                         Download CoreOS image (currently unimplemented)

    create
        single-node-ignition-config   Generate ignition config for single-node deployment
        ignition-configs              Generate ignition configs for multi-node deployment
        overlay                       Create custom ignition overlay from Butane configs
        manifests                     Generate and customize OKD manifests
        image
            bootstrap                 Create bootstrap node disk image
            master                    Create master node disk image
            worker                    Create worker node disk image

    copy
        images
            libvirt                   Copy generated disk images to libvirt directory

    help                              Show this help message

    openshift-install                 Direct access to openshift-install command
    oc                                Direct access to oc command

    Examples:
    --------
    # Set up the environment:
    $0 get tooling

    # Create a single-node deployment:
    $0 create single-node-ignition-config
    $0 create image bootstrap

    # Create a multi-node deployment:
    $0 create ignition-configs
    $0 create image bootstrap
    $0 create image master
    $0 create image worker

    # Copy images to libvirt:
    $0 copy images libvirt

    Notes:
    ------
    - The script requires a valid .env file with configuration settings
    - Root/sudo access is needed for disk image creation and libvirt operations
    - Podman is required for running container-based tools
    - All generated files will be placed in the configured output directory
EOF
}

function completion() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD - 1]}"

    opts="get create copy help openshift-install oc"

    if [[ ${cur} == -* ]]; then
        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        return 0
    fi

    case "${prev}" in
    get)
        COMPREPLY=($(compgen -W "tooling image" -- ${cur}))
        ;;
    create)
        COMPREPLY=($(compgen -W "single-node-ignition-config ignition-configs overlay manifests image" -- ${cur}))
        ;;
    create)
        if [[ ${COMP_WORDS[COMP_CWORD - 2]} == "image" ]]; then
            COMPREPLY=($(compgen -W "bootstrap master worker" -- ${cur}))
        fi
        ;;
    copy)
        COMPREPLY=($(compgen -W "images" -- ${cur}))
        ;;
    copy)
        if [[ ${COMP_WORDS[COMP_CWORD - 2]} == "images" ]]; then
            COMPREPLY=($(compgen -W "libvirt" -- ${cur}))
        fi
        ;;
    *)
        COMPREPLY=()
        ;;
    esac

    return 0
}

# Main script with command line argument handling
function main() {
    case $1 in
    "help")
        show_help
        ;;
    "init")
        init_directory
        ;;
    "completion")
        case $2 in
        "enable")
            complete -F completion ./kluster
            ;;
        "disable")
            complete -r ./kluster
            ;;
        *)
            show_help
            exit 1
            ;;
        esac
        ;;
        # Wrapper functions for OKD tools. This uses the correct context
    "openshift-install")
        ${TOOLING_DIR}/openshift-install --dir=${OUTPUT_DIR} ${@:2}
        ;;
    "oc")
        ${TOOLING_DIR}/oc ${@:2}
        ;;
        # Download the tools needed for the specific version of OKD
    "get")
        case $2 in
        "tooling")
            get_tooling
            ;;
        "image")
            get_image
            ;;
        *)
            show_help
            exit 1
            ;;
        esac
        ;;
        # Create ignition files and Image/ISO
    "create")
        case $2 in
        "single-node-ignition-config")
            create_single_node_ignition_config
            ;;
        "ignition-configs")
            create_ignition_configs
            ;;
        "overlay")
            create_overlay
            ;;
        "manifests")
            create_manifests
            ;;
        "image")
            case $3 in
            "bootstrap")
                create_disk_image "bootstrap"
                ;;
            "master")
                create_disk_image "master"
                ;;
            "worker")
                create_disk_image "worker"
                ;;
            *)
                show_help
                exit 1
                ;;
            esac
            ;;
        *)
            show_help
            exit 1
            ;;
        esac
        ;;
    "copy")
        case $2 in
        "images")
            case $3 in
            "libvirt")
                copy_to_libvirt
                ;;
            *)
                show_help
                exit 1
                ;;
            esac
            ;;
        *)
            show_help
            exit 1
            ;;
        esac
        ;;
    *)
        show_help
        exit 1
        ;;
    esac
}

# Execute main function with all script arguments
main $@
